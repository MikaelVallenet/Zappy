/*
** EPITECH PROJECT, 2022
** B-YEP-410-LYN-4-1-zappy-maxime.premont
** File description:
** player
*/

#ifndef PLAYER_H_
    #define PLAYER_H_

typedef struct player_s player_t;
typedef struct linked_player_s linked_player_t;
typedef struct sockaddr_in sockaddr_in_t;
typedef struct job_s job_t;

    #include "command.h"
    #include "inventory.h"

    #define MAX_COMMAND 10
    #define WRITE_BUFF_SIZE 100056

typedef struct coords_s {
    int x;
    int y;
} coords_t;

typedef enum direction_s {
    UP,
    RIGHT,
    DOWN,
    LEFT
} direction_t;

typedef enum orientation_s {
    SAME,
    UP_CENTER,
    UP_LEFT,
    CENTER_LEFT,
    DOWN_LEFT,
    DOWN_CENTER,
    DOWN_RIGHT,
    CENTER_RIGHT,
    UP_RIGHT
} orientation_t;

typedef enum state_s {
    UNUSED,
    ALIVE,
    DEAD,
    EGG
} state_t;

typedef struct player_s {
    int id;
    char *team_name;
    coords_t coords;
    direction_t direction;
    inventory_t inventory;
    state_t state;
    command_t *command[MAX_COMMAND + 1];
    int level;
    long int time_to_eat;
    long int time_start;
    char w_buffer[WRITE_BUFF_SIZE];
} player_t;

typedef struct linked_player_s {
    player_t player;
    linked_player_t *next;
} linked_player_t;

// Init //
/**
** @brief Called to initialize all the first players
** @param nb_cli number of players generated by team
** @param infos The structure containing all the game's informations
**/
void init_players(int nb_cli, job_t *infos);

/**
** @brief Called to initialize the map and it's tiles
** @param infos The structure containing all the game's informations
**/
void init_map(job_t *infos);

/**
** @brief Called to initialize the teams of the game
** @param ac The number of arguments given
** @param av The array of arguments given
** @param infos The structure containing all the game's informations
**/
void init_teams(int ac, char **av, job_t *infos);
// ----------------------- //

// Create //
/**
** @brief Called to initialize a new player
** @param player The player to be initialized
** @param team_name The name of his team
** @param job The structure containing all the game's informations
**/
void create_player(player_t *player, char *team_name, job_t *infos);

/**
** @brief Called to initialize a new egg
** @param player The egg to be initialized
** @param team_name The name of his team
** @param job The structure containing all the game's informations
** @param coords The coordinates of where the egg should be
**/
void create_egg(player_t *player, char *team_name,
job_t *infos, coords_t coord);
// ----------------------- //

// Linked //
/**
** @brief Called to append a player to the linked list of players
** @param list The list containing all the players of the games
** @param player The player to be added
**/
void append_player_node(linked_player_t **list, player_t player);

/**
** @brief Called to remove a player from the linked list of players
** @param list The list containing all the players of the games
** @param player The player to be removed
**/
void remove_player_node_by_id(linked_player_t **list, int destroy_id);

/**
** @brief Called to print the linked list of players
** @param list The list containing all the players of the games
**/
void print_linked_player(linked_player_t *list);
// ----------------------- //

// Action //
/**
** @brief Called to execute the player's actions
** and eat if the timing is right
** @param job The structure containing all the game's informations
**/
void exec_command(job_t *job);
// ----------------------- /

// Team //
/**
** @brief Called to check if the given name is an existing team name
** @param job The structure containing all the game's informations
**/
bool is_valid_team(char *name, job_t *job);

/**
** @brief Called to get the number of player available for a given
** team
** @param list The list containing all the players of the games
** @param team_name The name of the team concerned
**/
int get_nb_unsued(linked_player_t *head, char *team_name);
// ----------------------- //

// Print //
/**
** @brief Called to print the informations of the given player
** @param player The player concerned
**/
void print_player(player_t player);

/**
** @brief Called to print the informations of all the players
** @param list The linked list containing all the players
**/
void print_players(linked_player_t *list);
// ----------------------- //

// Destroy //
/**
** @brief Called to destroy/free all the players
** @param list The linked list containing all the players
**/
void destroy_players(linked_player_t *list);

/**
** @brief Called to free a given player
** @param player The player concerned
**/
void free_player(player_t *player);
// ----------------------- //

/**
** @brief Called to make a player move in a given direction
** @param player The player concerned
** @param direction The direction in which the player must move
**/
void move_direction(player_t *player, direction_t direction);


/**
** @brief Called to check and rectify if a player is out of bounds
** @param player The player concerned
** @param job The structure containing all the game's informations
**/
void check_limits(player_t *player, job_t *job);


/**
** @brief Called to get the number of players in a given position
** @param job The structure containing all the game's informations
** @param coords The coordinates to check
**/
int get_nb_players(job_t *job, coords_t coords);


/**
** @brief Called to send to the GUI the given player's inventory
** @param player The player concerned
** @param job The structure containing all the game's informations
**/
void simple_player_inv(player_t *player, job_t *job);

#endif /* !PLAYER_H_ */
